version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  install_dotnet:
    steps:
      - run:
          name: Install dotnet SDK
          command: |
            curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            sudo apt-add-repository https://packages.microsoft.com/ubuntu/20.04/prod
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-3.1

  build:
    steps:
      - checkout
      - run:
          name: Restore
          command: dotnet restore SignalFx.LambdaWrapper.sln
      - run:
          name: Build
          command: dotnet build  -c Release -warnAsMessage:msb3277 SignalFx.LambdaWrapper.sln

  test:
    steps:
      - run:
          name: SampleLambdaFunctions.Tests
          command: dotnet test -c Release test/SampleLambdaFunctions.Tests/SampleLambdaFunctions.Tests.csproj 
      - run:
          name: SampleServerlessASPNETCore.Tests
          command: dotnet test -c Release test/SampleServerlessASPNETCore.Tests/SampleServerlessASPNETCore.Tests.csproj 
      - run:
          name: SampleServerlessHttpApiV2ASPNETCore.Tests
          command: dotnet test -c Release test/SampleServerlessHttpApiV2ASPNETCore.Tests/SampleServerlessHttpApiV2ASPNETCore.Tests.csproj 
      - run:
          name: SignalFx.LambdaWrapper.Tests
          command: dotnet test -c Release test/SignalFx.LambdaWrapper.Tests/SignalFx.LambdaWrapper.Tests.csproj

  build_nuget:
    steps:
      - run:
          name: Build NuGet Package
          command: dotnet pack src/SignalFx.LambdaWrapper/SignalFx.LambdaWrapper.csproj -c Release -o bin/package 

  copy_nuget_for_release:
    steps:
      - run:
          name: Copy NuGet packages to artifacts directory
          command: cp -a bin/package/. artifacts/

jobs:
  Linux:
    machine:
      image: ubuntu-2004:202008-01
    steps:
      - install_dotnet
      - build
      - test
      - build_nuget

  Windows:
    executor: 
      name: win/default
      shell: cmd.exe
    steps:
      - build
      - test
      - build_nuget
      - copy_nuget_for_release
      - store_artifacts:
          path: artifacts
      - persist_to_workspace:
          root: .
          paths:
              - artifacts

  PublishGitHubRelease:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish Release on GitHub
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} ./artifacts/

  PublishNuGetPackages:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish NuGet Packages
          command: |
            for i in ./artifacts/*.nupkg; do dotnet nuget push $i --source "${NUGET_FEED_URL}" --api-key ${NUGET_KEY}; done

workflows:
  version: 2
  build:
    jobs:
      - Linux:
          filters:
            tags:
              only: /.*/ # this assures that the step will be run when the tag is pushed
      - Windows:
          filters:
            tags:
              only: /.*/
      - PublishGitHubRelease:
          requires:
            - Linux
            - Windows
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+$/
      - PublishNuGetPackages:
          requires:
            - Linux
            - Windows
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+$/

